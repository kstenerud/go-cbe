package rules

import (
	"math"
	"strings"
	"testing"
)

const codecVersion = 1

func assertSuccess(t *testing.T, err error) {
	if err != nil {
		t.Errorf("Unexpected error: %v", err)
	}
}

func assertFailure(t *testing.T, err error) {
	if err == nil {
		t.Errorf("Expected an error")
	}
}

func assertSuccessAddString(t *testing.T, rules *Rules, value string) {
	length := len(value)
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(uint64(length), true))
	if length > 0 {
		assertSuccess(t, rules.AddArrayData([]byte(value)))
	}
}

func assertSuccessAddBytes(t *testing.T, rules *Rules, value []byte) {
	length := len(value)
	assertSuccess(t, rules.BeginBytes())
	assertSuccess(t, rules.BeginArrayChunk(uint64(length), true))
	if length > 0 {
		assertSuccess(t, rules.AddArrayData([]byte(value)))
	}
}

func assertSuccessAddURI(t *testing.T, rules *Rules, uri string) {
	length := len(uri)
	assertSuccess(t, rules.BeginURI())
	assertSuccess(t, rules.BeginArrayChunk(uint64(length), true))
	if length > 0 {
		assertSuccess(t, rules.AddArrayData([]byte(uri)))
	}
}

func assertInArray(t *testing.T, rules *Rules) {
	if !rules.IsInArray() {
		t.Errorf("Expected to be in array")
	}
}

func assertNotInArray(t *testing.T, rules *Rules) {
	if rules.IsInArray() {
		t.Errorf("Expected to not be in array")
	}
}

var stringGeneratorChars = [...]byte{
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
	'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
	'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
}

func generateString(length int) []byte {
	var result strings.Builder
	for i := 0; i < length; i++ {
		result.WriteByte(stringGeneratorChars[i%len(stringGeneratorChars)])
	}
	return []byte(result.String())
}

func generateBytes(length int) []byte {
	return generateString(length)
}

func newRulesAfterVersion(limits *Limits) *Rules {
	rules := NewRules(codecVersion, limits)
	if err := rules.AddVersion(codecVersion); err != nil {
		panic(err)
	}
	return rules
}

func newRulesWithMaxDepth(maxDepth int) *Rules {
	limits := DefaultLimits()
	limits.MaxContainerDepth = uint64(maxDepth)
	return newRulesAfterVersion(limits)
}

// ===========
// Basic Types
// ===========

func TestVersion(t *testing.T) {
	rules := NewRules(1, DefaultLimits())
	assertFailure(t, rules.AddVersion(2))
	assertSuccess(t, rules.AddVersion(1))
	assertFailure(t, rules.AddVersion(1))
}

func TestNil(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddNil())
	assertSuccess(t, rules.EndDocument())
}

func TestNan(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddNan())
	assertSuccess(t, rules.EndDocument())
}

func TestNan2(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddFloat(math.NaN()))
	assertSuccess(t, rules.EndDocument())
}

func TestBool(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.EndDocument())
}

func TestPositiveInt(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndDocument())
}

func TestNegativeInt(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddNegativeInt())
	assertSuccess(t, rules.EndDocument())
}

func TestFloat(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddFloat(0.1))
	assertSuccess(t, rules.EndDocument())
}

func TestTime(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddTime())
	assertSuccess(t, rules.EndDocument())
}

func TestMarker(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.BeginMarker())
	assertSuccessAddString(t, rules, "a")
	assertSuccess(t, rules.AddFloat(0.1))
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(100))
	assertSuccess(t, rules.AddTime())
	assertSuccess(t, rules.EndList())
}

func TestReference(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginList())

	assertSuccess(t, rules.BeginMarker())
	assertSuccessAddString(t, rules, "a")
	assertSuccess(t, rules.AddFloat(0.1))

	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(100))
	assertSuccess(t, rules.AddTime())

	assertSuccess(t, rules.BeginReference())
	assertSuccessAddString(t, rules, "a")

	assertSuccess(t, rules.BeginReference())
	assertSuccess(t, rules.AddPositiveInt(100))

	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.AddPositiveInt(5))

	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(4, true))
	assertFailure(t, rules.AddArrayData([]byte("test")))
}

// ===========
// Array Types
// ===========

func testBytes(t *testing.T, length int, byteCount ...int) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginBytes())
	lastIndex := len(byteCount) - 1
	if lastIndex < 0 {
		assertSuccess(t, rules.BeginArrayChunk(0, true))
	} else {
		for i, count := range byteCount {
			assertSuccess(t, rules.BeginArrayChunk(uint64(count), i == lastIndex))
			if count > 0 {
				assertSuccess(t, rules.AddArrayData(make([]byte, count)))
			}
		}
	}
	assertSuccess(t, rules.EndDocument())
}

func TestBytes(t *testing.T) {
	testBytes(t, 0)
	testBytes(t, 1, 1)
	testBytes(t, 2, 2)
	testBytes(t, 10, 10)
	testBytes(t, 100, 14, 55, 20, 11)
}

func TestBytesMultiChunk(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginBytes())
	assertSuccess(t, rules.BeginArrayChunk(10, true))
	assertSuccess(t, rules.AddArrayData(generateBytes(5)))
	assertSuccess(t, rules.AddArrayData(generateBytes(3)))
	assertSuccess(t, rules.AddArrayData(generateBytes(2)))
	assertSuccess(t, rules.EndDocument())
}

func testString(t *testing.T, length int, byteCount ...int) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginString())
	lastIndex := len(byteCount) - 1
	if lastIndex < 0 {
		assertSuccess(t, rules.BeginArrayChunk(0, true))
	} else {
		for i, count := range byteCount {
			assertSuccess(t, rules.BeginArrayChunk(uint64(count), i == lastIndex))
			if count > 0 {
				assertSuccess(t, rules.AddArrayData(generateString(count)))
			}
		}
	}
	assertSuccess(t, rules.EndDocument())
}

func TestString(t *testing.T) {
	testString(t, 0)
	testString(t, 1, 1)
	testString(t, 2, 2)
	testString(t, 10, 10)
	testString(t, 111, 10, 50, 41, 10)
}

func TestStringMultiChunk(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(20, true))
	assertSuccess(t, rules.AddArrayData(generateString(5)))
	assertSuccess(t, rules.AddArrayData(generateString(3)))
	assertSuccess(t, rules.AddArrayData(generateString(12)))
	assertSuccess(t, rules.EndDocument())
}

func TestURI(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginURI())
	assertSuccess(t, rules.BeginArrayChunk(18, true))
	assertSuccess(t, rules.AddArrayData([]byte("http://example.com")))
	assertSuccess(t, rules.EndDocument())
}

func TestURIMultiChunk(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginURI())
	assertSuccess(t, rules.BeginArrayChunk(13, true))
	assertSuccess(t, rules.AddArrayData([]byte("http:")))
	assertSuccess(t, rules.AddArrayData([]byte("test")))
	assertSuccess(t, rules.AddArrayData([]byte(".net")))
	assertSuccess(t, rules.EndDocument())
}

func TestInArrayBasic(t *testing.T) {
	rules := newRulesWithMaxDepth(9)
	assertNotInArray(t, rules)
	assertSuccess(t, rules.BeginBytes())
	assertInArray(t, rules)
	assertSuccess(t, rules.BeginArrayChunk(4, true))
	assertInArray(t, rules)
	assertSuccess(t, rules.AddArrayData(generateString(4)))
	assertNotInArray(t, rules)
	assertSuccess(t, rules.EndDocument())
	assertNotInArray(t, rules)
}

func TestInArray(t *testing.T) {
	rules := newRulesWithMaxDepth(9)
	assertNotInArray(t, rules)
	assertSuccess(t, rules.BeginList())
	assertNotInArray(t, rules)
	assertSuccess(t, rules.BeginString())
	assertInArray(t, rules)
	assertSuccess(t, rules.BeginArrayChunk(10, false))
	assertInArray(t, rules)
	assertSuccess(t, rules.AddArrayData(generateString(4)))
	assertInArray(t, rules)
	assertSuccess(t, rules.AddArrayData(generateString(4)))
	assertInArray(t, rules)
	assertSuccess(t, rules.AddArrayData(generateString(2)))
	assertInArray(t, rules)
	assertSuccess(t, rules.BeginArrayChunk(5, true))
	assertInArray(t, rules)
	assertSuccess(t, rules.AddArrayData(generateString(5)))
	assertNotInArray(t, rules)
	assertSuccess(t, rules.BeginURI())
	assertInArray(t, rules)
	assertSuccess(t, rules.BeginArrayChunk(5, true))
	assertInArray(t, rules)
	assertSuccess(t, rules.AddArrayData([]byte("a:123")))
	assertNotInArray(t, rules)
	assertSuccess(t, rules.EndList())
	assertNotInArray(t, rules)
	assertSuccess(t, rules.EndDocument())
	assertNotInArray(t, rules)
}

func TestInArrayEmpty(t *testing.T) {
	rules := newRulesWithMaxDepth(9)
	assertNotInArray(t, rules)
	assertSuccess(t, rules.BeginList())
	assertNotInArray(t, rules)
	assertSuccess(t, rules.BeginString())
	assertInArray(t, rules)
	assertSuccess(t, rules.BeginArrayChunk(0, true))
	assertNotInArray(t, rules)
	assertSuccess(t, rules.BeginBytes())
	assertInArray(t, rules)
	assertSuccess(t, rules.BeginArrayChunk(0, true))
	assertNotInArray(t, rules)
	assertSuccess(t, rules.EndList())
	assertNotInArray(t, rules)
	assertSuccess(t, rules.EndDocument())
	assertNotInArray(t, rules)
}

// =================
// Containers: Empty
// =================

func TestListEmpty(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndDocument())
}

func TestMapEmpty(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndDocument())
}

func TestMarkupEmpty(t *testing.T) {
	rules := newRulesWithMaxDepth(2)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccessAddString(t, rules, "a")
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndDocument())
}

func TestMetadataEmpty(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndDocument())
}

func TestCommentEmpty(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginComment())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndDocument())
}

// =======================
// Containers: Single item
// =======================

func TestListSingleItem(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndDocument())
}

func TestMapPair(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddNil())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndDocument())
}

func TestMarkupSingleItem(t *testing.T) {
	rules := newRulesWithMaxDepth(2)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccessAddString(t, rules, "abcdef")
	assertSuccess(t, rules.AddNegativeInt())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.EndContainer())
	assertSuccessAddString(t, rules, "a")
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndDocument())
}

func TestMetadataSingleItem(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.AddNegativeInt())
	assertSuccess(t, rules.EndDocument())
}

func TestCommentSingleItem(t *testing.T) {
	rules := newRulesWithMaxDepth(2)
	assertSuccess(t, rules.BeginComment())
	assertSuccessAddString(t, rules, "a")
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndDocument())
}

// ==================
// Containers: Filled
// ==================

func TestListFilled(t *testing.T) {
	rules := newRulesWithMaxDepth(2)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.AddNil())
	assertSuccess(t, rules.AddNan())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddFloat(0.1))
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddNegativeInt())
	assertSuccess(t, rules.AddTime())
	assertSuccessAddBytes(t, rules, generateBytes(1))
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndDocument())
}

func TestMapFilled(t *testing.T) {
	rules := newRulesWithMaxDepth(2)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddNil())
	assertSuccess(t, rules.AddFloat(0.1))
	assertSuccess(t, rules.AddNan())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddNegativeInt())
	assertSuccess(t, rules.AddTime())
	assertSuccessAddBytes(t, rules, generateBytes(1))
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndDocument())
}

func TestMetadataFilled(t *testing.T) {
	rules := newRulesWithMaxDepth(2)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddNil())
	assertSuccess(t, rules.AddFloat(0.1))
	assertSuccess(t, rules.AddNan())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddNegativeInt())
	assertSuccess(t, rules.AddTime())
	assertSuccessAddBytes(t, rules, generateBytes(1))
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndDocument())
}

func TestMapList(t *testing.T) {
	rules := newRulesWithMaxDepth(2)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndDocument())
}

func TestMapMap(t *testing.T) {
	rules := newRulesWithMaxDepth(2)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndDocument())
}

func TestDeepContainer(t *testing.T) {
	rules := newRulesWithMaxDepth(6)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddNegativeInt())
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginList())
	assertSuccessAddString(t, rules, "0123456789")
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndDocument())
}

func TestCommentInt(t *testing.T) {
	rules := newRulesWithMaxDepth(2)
	assertSuccess(t, rules.BeginComment())
	assertSuccessAddString(t, rules, "blah\r\n\t\tblah")
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(1, true))
	assertFailure(t, rules.AddArrayData([]byte{0x00}))
	assertFailure(t, rules.AddArrayData([]byte{0x0b}))
	assertFailure(t, rules.AddArrayData([]byte{0x7f}))
	assertFailure(t, rules.AddArrayData([]byte{0x80}))
	assertSuccess(t, rules.AddArrayData([]byte{0x40}))
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndDocument())
}

func TestCommentMap(t *testing.T) {
	rules := newRulesWithMaxDepth(3)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.BeginComment())
	assertSuccessAddString(t, rules, "a")
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddNegativeInt())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndDocument())
}

func TestMetadataCommentMap(t *testing.T) {
	rules := newRulesWithMaxDepth(4)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.BeginComment())
	assertSuccessAddString(t, rules, "a")
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.AddNegativeInt())
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.AddNegativeInt())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndDocument())
}

func TestMarkup(t *testing.T) {
	rules := newRulesWithMaxDepth(2)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccessAddString(t, rules, "a")
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddNegativeInt())
	assertSuccess(t, rules.EndContainer())
	assertSuccessAddString(t, rules, "a")
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndDocument())
}

// =============
// Allowed Types
// =============

func TestAllowedTypesTLO(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginComment())
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddNil())
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddNan())
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddBool())
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddPositiveInt(1))
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddNegativeInt())
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddFloat(0.1))
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddTime())
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginList())
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginMap())
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginMarkup())
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginMetadata())
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginComment())
	rules = newRulesWithMaxDepth(1)
	assertFailure(t, rules.EndContainer())
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginBytes())
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginString())
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginURI())
	rules = newRulesWithMaxDepth(1)
	assertFailure(t, rules.BeginArrayChunk(1, true))
	rules = newRulesWithMaxDepth(1)
	assertFailure(t, rules.AddArrayData([]byte{0}))
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginMarker())
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginReference())
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddPadding())
	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.EndDocument())
}

func TestAllowedTypesList(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.AddNil())
	assertSuccess(t, rules.AddNan())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddNegativeInt())
	assertSuccess(t, rules.AddFloat(0.1))
	assertSuccess(t, rules.AddTime())
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.BeginMarkup())
	assertSuccessAddString(t, rules, "a")
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.BeginComment())
	assertSuccess(t, rules.EndContainer())
	assertSuccessAddBytes(t, rules, []byte{})
	assertSuccessAddString(t, rules, "")
	assertSuccess(t, rules.BeginURI())
	assertSuccess(t, rules.BeginArrayChunk(2, true))
	assertSuccess(t, rules.AddArrayData([]byte("a:")))
	assertFailure(t, rules.AddArrayData([]byte{0}))
	assertSuccess(t, rules.BeginMarker())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.BeginReference())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.AddPadding())
	assertFailure(t, rules.EndDocument())
	assertSuccess(t, rules.EndContainer())
}

func TestAllowedTypesMapKey(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertFailure(t, rules.AddNil())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertFailure(t, rules.AddNan())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddPositiveInt(1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddNegativeInt())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddFloat(0.1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddTime())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertFailure(t, rules.BeginList())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertFailure(t, rules.BeginMap())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertFailure(t, rules.BeginMarkup())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.BeginMetadata())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.BeginComment())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.EndContainer())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccessAddBytes(t, rules, []byte{})
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccessAddString(t, rules, "")
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccessAddURI(t, rules, "a:")
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertFailure(t, rules.AddArrayData([]byte{0}))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertFailure(t, rules.BeginArrayChunk(0, true))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.BeginMarker())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.BeginReference())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddPadding())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertFailure(t, rules.EndDocument())
}

func TestAllowedTypesMapValue(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddNil())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddNan())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddBool())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddPositiveInt(1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddNegativeInt())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddFloat(0.1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddTime())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginList())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginMap())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginMarkup())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginMetadata())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginComment())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.EndContainer())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccessAddBytes(t, rules, []byte{})
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccessAddString(t, rules, "")
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccessAddURI(t, rules, "a:")
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.AddArrayData([]byte{0}))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.BeginArrayChunk(0, true))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginMarker())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginReference())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddPadding())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.EndDocument())
}

func TestAllowedTypesMetadataKey(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertFailure(t, rules.AddNil())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertFailure(t, rules.AddNan())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddPositiveInt(1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddNegativeInt())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddFloat(0.1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddTime())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertFailure(t, rules.BeginList())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertFailure(t, rules.BeginMap())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertFailure(t, rules.BeginMarkup())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.BeginMetadata())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.BeginComment())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.EndContainer())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccessAddBytes(t, rules, []byte{})
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccessAddString(t, rules, "")
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccessAddURI(t, rules, "a:")
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertFailure(t, rules.AddArrayData([]byte{0}))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertFailure(t, rules.BeginArrayChunk(0, true))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.BeginMarker())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.BeginReference())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddPadding())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertFailure(t, rules.EndDocument())
}

func TestAllowedTypesMetadataValue(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddNil())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddNan())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddBool())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddPositiveInt(1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddNegativeInt())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddFloat(0.1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddTime())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginList())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginMap())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginMarkup())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginMetadata())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginComment())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.EndContainer())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccessAddBytes(t, rules, []byte{})
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccessAddString(t, rules, "")
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccessAddURI(t, rules, "a:")
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.AddArrayData([]byte{0}))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.BeginArrayChunk(0, true))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginMarker())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginReference())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddPadding())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.EndDocument())
}

func TestAllowedTypesComment(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginComment())
	assertFailure(t, rules.AddNil())
	assertFailure(t, rules.AddNan())
	assertFailure(t, rules.AddBool())
	assertFailure(t, rules.AddPositiveInt(1))
	assertFailure(t, rules.AddNegativeInt())
	assertFailure(t, rules.AddFloat(0.1))
	assertFailure(t, rules.AddTime())
	assertFailure(t, rules.BeginList())
	assertFailure(t, rules.BeginMap())
	assertFailure(t, rules.BeginMarkup())
	assertFailure(t, rules.BeginMetadata())
	assertSuccess(t, rules.BeginComment())
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.BeginBytes())
	assertSuccessAddString(t, rules, "")
	assertFailure(t, rules.BeginURI())
	assertFailure(t, rules.AddArrayData([]byte{0}))
	assertFailure(t, rules.BeginArrayChunk(0, true))
	assertFailure(t, rules.BeginMarker())
	assertFailure(t, rules.BeginReference())
	assertSuccess(t, rules.AddPadding())
	assertFailure(t, rules.EndDocument())
	assertSuccess(t, rules.EndContainer())
}

func TestAllowedTypesMarkupName(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.AddNil())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.AddNan())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.AddBool())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.AddNegativeInt())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.AddFloat(0.1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.AddTime())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.BeginList())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.BeginMap())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.BeginMarkup())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.BeginMetadata())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.BeginComment())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.EndContainer())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.BeginBytes())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.BeginString())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.BeginURI())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.AddArrayData([]byte{0}))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.BeginArrayChunk(0, true))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.BeginMarker())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.BeginReference())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPadding())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.EndDocument())
}

func TestAllowedTypesMarkupAttributeKey(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertFailure(t, rules.AddNil())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertFailure(t, rules.AddNan())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddPositiveInt(1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddNegativeInt())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddFloat(0.1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddTime())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertFailure(t, rules.BeginList())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertFailure(t, rules.BeginMap())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertFailure(t, rules.BeginMarkup())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginMetadata())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginComment())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginBytes())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginString())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginURI())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertFailure(t, rules.AddArrayData([]byte{0}))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertFailure(t, rules.BeginArrayChunk(0, true))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginMarker())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginReference())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddPadding())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertFailure(t, rules.EndDocument())
}

func TestAllowedTypesMarkupAttributeValue(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddNil())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddNan())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddBool())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddPositiveInt(1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddNegativeInt())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddFloat(0.1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddTime())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginList())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginMap())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginMarkup())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginMetadata())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginComment())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.EndContainer())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginBytes())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginString())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginURI())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.AddArrayData([]byte{0}))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.BeginArrayChunk(0, true))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginMarker())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginReference())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddPadding())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.EndDocument())
}

func TestAllowedTypesMarkupContents(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.AddNil())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.AddNan())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.AddBool())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.AddPositiveInt(1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.AddNegativeInt())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.AddFloat(0.1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.AddTime())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.BeginList())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.BeginMap())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.BeginMarkup())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.BeginMetadata())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.BeginComment())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndContainer())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.BeginBytes())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.BeginString())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.BeginURI())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.AddArrayData([]byte{0}))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.BeginArrayChunk(0, true))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.BeginMarker())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.BeginReference())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.AddPadding())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.EndDocument())
}

func TestAllowedTypesArray(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginBytes())
	assertFailure(t, rules.AddNil())
	assertFailure(t, rules.AddNan())
	assertFailure(t, rules.AddBool())
	assertFailure(t, rules.AddPositiveInt(1))
	assertFailure(t, rules.AddNegativeInt())
	assertFailure(t, rules.AddFloat(0.1))
	assertFailure(t, rules.AddTime())
	assertFailure(t, rules.BeginList())
	assertFailure(t, rules.BeginMap())
	assertFailure(t, rules.BeginMarkup())
	assertFailure(t, rules.BeginMetadata())
	assertFailure(t, rules.BeginComment())
	assertFailure(t, rules.EndContainer())
	assertFailure(t, rules.BeginBytes())
	assertFailure(t, rules.BeginString())
	assertFailure(t, rules.BeginURI())
	assertFailure(t, rules.AddArrayData([]byte{0}))
	assertFailure(t, rules.BeginMarker())
	assertFailure(t, rules.BeginReference())
	assertFailure(t, rules.AddPadding())
	assertFailure(t, rules.EndDocument())

	assertSuccess(t, rules.BeginArrayChunk(1, true))
	assertFailure(t, rules.AddNil())
	assertFailure(t, rules.AddNan())
	assertFailure(t, rules.AddBool())
	assertFailure(t, rules.AddPositiveInt(1))
	assertFailure(t, rules.AddNegativeInt())
	assertFailure(t, rules.AddFloat(0.1))
	assertFailure(t, rules.AddTime())
	assertFailure(t, rules.BeginList())
	assertFailure(t, rules.BeginMap())
	assertFailure(t, rules.BeginMarkup())
	assertFailure(t, rules.BeginMetadata())
	assertFailure(t, rules.BeginComment())
	assertFailure(t, rules.EndContainer())
	assertFailure(t, rules.BeginBytes())
	assertFailure(t, rules.BeginString())
	assertFailure(t, rules.BeginURI())
	assertFailure(t, rules.BeginMarker())
	assertFailure(t, rules.BeginReference())
	assertFailure(t, rules.AddPadding())
	assertFailure(t, rules.EndDocument())
	assertFailure(t, rules.BeginArrayChunk(1, true))

	assertSuccess(t, rules.AddArrayData([]byte{0}))
}

func TestAllowedTypesMarkerID(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.AddNil())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.AddNan())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.AddBool())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.AddNegativeInt())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.AddFloat(0.1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.AddTime())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.BeginList())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.BeginMap())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.BeginMarkup())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.BeginMetadata())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.BeginComment())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.EndContainer())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.BeginBytes())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.BeginString())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.BeginURI())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.AddArrayData([]byte{0}))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.BeginArrayChunk(0, true))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.BeginMarker())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.BeginReference())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPadding())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertFailure(t, rules.EndDocument())
}

func TestAllowedTypesMarkerValue(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddNil())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddNan())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddPositiveInt(1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddNegativeInt())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddFloat(0.1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddTime())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginList())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginMap())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginMarkup())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginMetadata())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginComment())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertFailure(t, rules.EndContainer())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginBytes())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginString())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginURI())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertFailure(t, rules.AddArrayData([]byte{0}))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertFailure(t, rules.BeginArrayChunk(0, true))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginMarker())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginReference())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddPadding())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertFailure(t, rules.EndDocument())
}

func TestAllowedTypesReferenceID(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.AddNil())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.AddNan())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.AddBool())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddFloat(0.1))
	assertSuccess(t, rules.BeginReference())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndList())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.AddNegativeInt())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.AddFloat(0.1))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.AddTime())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.BeginList())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.BeginMap())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.BeginMarkup())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.BeginMetadata())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.BeginComment())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.EndContainer())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.BeginBytes())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertSuccess(t, rules.BeginString())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertSuccess(t, rules.BeginURI())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.AddArrayData([]byte{0}))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.BeginArrayChunk(0, true))
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.BeginMarker())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.BeginReference())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertSuccess(t, rules.AddPadding())
	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginReference())
	assertFailure(t, rules.EndDocument())
}

func TestEmptyDocument(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.EndDocument())
}

func TestOnlyComment(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginComment())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndDocument())
}

func TestOnlyPadding(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.AddPadding())
	assertSuccess(t, rules.EndDocument())
}

func TestMarkerCommentObject(t *testing.T) {
	rules := newRulesWithMaxDepth(9)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginComment())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.AddBool())
}

func TestMarkerMetadataObject(t *testing.T) {
	rules := newRulesWithMaxDepth(9)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.AddBool())
}

func TestMarkerReference(t *testing.T) {
	rules := newRulesWithMaxDepth(9)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(2))
	assertSuccess(t, rules.BeginReference())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertSuccess(t, rules.EndContainer())
}

// ================
// Error conditions
// ================

func TestErrorOnlyMetadata(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.EndDocument())
}

func TestErrorListOnlyMetadata(t *testing.T) {
	rules := newRulesWithMaxDepth(2)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.EndContainer())
}

func TestErrorNoContainerToEnd(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertFailure(t, rules.EndContainer())
}

func TestErrorNoArrayToBeginChunk(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertFailure(t, rules.BeginArrayChunk(0, true))
}

func TestErrorEndContainerTooManyTimes(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.EndContainer())

	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.EndContainer())

	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.EndContainer())

	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginComment())
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.EndContainer())

	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccessAddString(t, rules, "a")
	assertSuccess(t, rules.EndContainer())
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.EndContainer())
}

func TestErrorUnendedContainer(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginList())
	assertFailure(t, rules.EndDocument())

	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertFailure(t, rules.EndDocument())

	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertFailure(t, rules.EndDocument())

	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginComment())
	assertFailure(t, rules.EndDocument())

	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertFailure(t, rules.EndDocument())

	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccessAddString(t, rules, "a")
	assertFailure(t, rules.EndDocument())

	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccessAddString(t, rules, "a")
	assertSuccess(t, rules.EndContainer())
	assertFailure(t, rules.EndDocument())
}

func TestErrorUnendedArray(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginBytes())
	assertFailure(t, rules.EndDocument())

	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginString())
	assertFailure(t, rules.EndDocument())

	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginURI())
	assertFailure(t, rules.EndDocument())
}

func TestErrorArrayTooManyBytes(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginBytes())
	assertSuccess(t, rules.BeginArrayChunk(5, true))
	assertFailure(t, rules.AddArrayData(generateBytes(6)))

	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(5, true))
	assertFailure(t, rules.AddArrayData(generateBytes(6)))

	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginURI())
	assertSuccess(t, rules.BeginArrayChunk(5, true))
	assertFailure(t, rules.AddArrayData(generateBytes(6)))
}

func TestErrorArrayTooFewBytes(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginBytes())
	assertSuccess(t, rules.BeginArrayChunk(5, true))
	assertSuccess(t, rules.AddArrayData(generateBytes(4)))
	assertFailure(t, rules.EndDocument())

	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(5, true))
	assertSuccess(t, rules.AddArrayData(generateBytes(4)))
	assertFailure(t, rules.EndDocument())

	rules = newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginURI())
	assertSuccess(t, rules.BeginArrayChunk(5, true))
	assertSuccess(t, rules.AddArrayData(generateBytes(4)))
	assertFailure(t, rules.EndDocument())
}

func TestErrorAddDataNotInArray(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertFailure(t, rules.AddArrayData(generateBytes(4)))
}

func TestErrorInvalidMapKey(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertFailure(t, rules.AddArrayData(generateBytes(4)))
	assertFailure(t, rules.AddNil())
	assertFailure(t, rules.AddNan())
	assertFailure(t, rules.BeginList())
	assertFailure(t, rules.BeginMap())
	assertFailure(t, rules.BeginMarkup())

	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertFailure(t, rules.AddArrayData(generateBytes(4)))
	assertFailure(t, rules.AddNil())
	assertFailure(t, rules.AddNan())
	assertFailure(t, rules.BeginList())
	assertFailure(t, rules.BeginMap())
	assertFailure(t, rules.BeginMarkup())

	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(1, true))
	assertSuccess(t, rules.AddArrayData(generateString(1)))
	assertFailure(t, rules.AddArrayData(generateBytes(4)))
	assertFailure(t, rules.AddNil())
	assertFailure(t, rules.AddNan())
	assertFailure(t, rules.BeginList())
	assertFailure(t, rules.BeginMap())
	assertFailure(t, rules.BeginMarkup())
}

func TestErrorMapMissingValue(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMap())
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.EndContainer())

	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.EndContainer())

	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccessAddString(t, rules, "a")
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.EndContainer())
}

func TestErrorMarkupNameLength0(t *testing.T) {
	rules := newRulesWithMaxDepth(2)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.BeginString())
	assertFailure(t, rules.BeginArrayChunk(0, true))
}

func TestErrorMarkerIDLength0(t *testing.T) {
	rules := newRulesWithMaxDepth(2)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.BeginString())
	assertFailure(t, rules.BeginArrayChunk(0, true))
}

func TestErrorMarkerFollowedByEndContainer(t *testing.T) {
	rules := newRulesWithMaxDepth(9)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(1))
	assertFailure(t, rules.EndContainer())
}

func TestErrorReferenceIDLength0(t *testing.T) {
	rules := newRulesWithMaxDepth(2)
	assertSuccess(t, rules.BeginReference())
	assertSuccess(t, rules.BeginString())
	assertFailure(t, rules.BeginArrayChunk(0, true))
}

func TestErrorURILength0_1(t *testing.T) {
	rules := newRulesWithMaxDepth(2)
	assertSuccess(t, rules.BeginURI())
	assertFailure(t, rules.BeginArrayChunk(0, true))

	rules = newRulesWithMaxDepth(2)
	assertSuccess(t, rules.BeginURI())
	assertSuccess(t, rules.BeginArrayChunk(1, true))
	assertFailure(t, rules.AddArrayData([]byte{0x40}))
}

func TestErrorDuplicateMarkerID(t *testing.T) {
	rules := newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(4, true))
	assertSuccess(t, rules.AddArrayData([]byte("test")))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(4, true))
	assertSuccess(t, rules.AddArrayData([]byte("test")))
	assertFailure(t, rules.AddFloat(0.1))

	rules = newRulesWithMaxDepth(10)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(100))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(100))
	assertFailure(t, rules.AddFloat(0.1))
}

// ======
// Limits
// ======

func TestMaxBytesLength(t *testing.T) {
	limits := DefaultLimits()
	limits.MaxBytesLength = 10
	rules := newRulesAfterVersion(limits)
	assertSuccess(t, rules.BeginBytes())
	assertSuccess(t, rules.BeginArrayChunk(11, true))
	assertFailure(t, rules.AddArrayData(generateBytes(11)))

	rules = newRulesAfterVersion(limits)
	assertSuccess(t, rules.BeginBytes())
	assertSuccess(t, rules.BeginArrayChunk(8, false))
	assertSuccess(t, rules.AddArrayData(generateBytes(8)))
	assertSuccess(t, rules.BeginArrayChunk(4, true))
	assertFailure(t, rules.AddArrayData(generateBytes(4)))
}

func TestMaxStringLength(t *testing.T) {
	limits := DefaultLimits()
	limits.MaxStringLength = 10
	rules := newRulesAfterVersion(limits)
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(11, true))
	assertFailure(t, rules.AddArrayData(generateString(11)))

	rules = newRulesAfterVersion(limits)
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(8, false))
	assertSuccess(t, rules.AddArrayData(generateString(8)))
	assertSuccess(t, rules.BeginArrayChunk(4, true))
	assertFailure(t, rules.AddArrayData(generateString(4)))
}

func TestMaxURILength(t *testing.T) {
	limits := DefaultLimits()
	limits.MaxURILength = 10
	rules := newRulesAfterVersion(limits)
	assertSuccess(t, rules.BeginURI())
	assertSuccess(t, rules.BeginArrayChunk(11, true))
	assertFailure(t, rules.AddArrayData([]byte("someuri:aaa")))

	rules = newRulesAfterVersion(limits)
	assertSuccess(t, rules.BeginURI())
	assertSuccess(t, rules.BeginArrayChunk(8, false))
	assertSuccess(t, rules.AddArrayData([]byte("someuri:")))
	assertSuccess(t, rules.BeginArrayChunk(4, true))
	assertFailure(t, rules.AddArrayData(generateString(4)))
}

func TestMaxIDLength(t *testing.T) {
	limits := DefaultLimits()
	limits.MaxIDLength = 10
	rules := newRulesAfterVersion(limits)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(11, true))
	assertFailure(t, rules.AddArrayData(generateString(11)))

	rules = newRulesAfterVersion(limits)
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(8, false))
	assertSuccess(t, rules.AddArrayData(generateString(8)))
	assertSuccess(t, rules.BeginArrayChunk(4, true))
	assertFailure(t, rules.AddArrayData(generateString(4)))

	rules = newRulesAfterVersion(limits)
	assertSuccess(t, rules.BeginReference())
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(11, true))
	assertFailure(t, rules.AddArrayData(generateString(11)))

	rules = newRulesAfterVersion(limits)
	assertSuccess(t, rules.BeginReference())
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(8, false))
	assertSuccess(t, rules.AddArrayData(generateString(8)))
	assertSuccess(t, rules.BeginArrayChunk(4, true))
	assertFailure(t, rules.AddArrayData(generateString(4)))
}

func TestMaxMarkupNameLength(t *testing.T) {
	limits := DefaultLimits()
	limits.MaxMarkupNameLength = 10
	rules := newRulesAfterVersion(limits)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(11, true))
	assertFailure(t, rules.AddArrayData(generateString(11)))

	rules = newRulesAfterVersion(limits)
	assertSuccess(t, rules.BeginMarkup())
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(8, false))
	assertSuccess(t, rules.AddArrayData(generateString(8)))
	assertSuccess(t, rules.BeginArrayChunk(4, true))
	assertFailure(t, rules.AddArrayData(generateString(4)))
}

func TestMaxContainerDepth(t *testing.T) {
	rules := newRulesWithMaxDepth(1)
	assertSuccess(t, rules.BeginList())
	assertFailure(t, rules.BeginList())
}

func TestMaxObjectCount(t *testing.T) {
	limits := DefaultLimits()
	limits.MaxObjectCount = 3
	rules := newRulesAfterVersion(limits)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(11, true))
	assertSuccess(t, rules.AddArrayData(generateString(11)))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.EndList())

	rules = newRulesAfterVersion(limits)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.BeginComment())
	assertSuccess(t, rules.EndComment())
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.EndMetadata())
	assertSuccess(t, rules.BeginMetadata())
	assertSuccess(t, rules.EndMetadata())
	assertFailure(t, rules.EndList())
}

func TestMaxReferenceCount(t *testing.T) {
	limits := DefaultLimits()
	limits.MaxReferenceCount = 2
	rules := newRulesAfterVersion(limits)
	assertSuccess(t, rules.BeginList())
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.BeginString())
	assertSuccess(t, rules.BeginArrayChunk(11, true))
	assertSuccess(t, rules.AddArrayData(generateString(11)))
	assertSuccess(t, rules.AddBool())
	assertSuccess(t, rules.BeginMarker())
	assertSuccess(t, rules.AddPositiveInt(10))
	assertSuccess(t, rules.AddBool())
	assertFailure(t, rules.BeginMarker())
}
